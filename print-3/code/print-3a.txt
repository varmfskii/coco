                      (      print-3.asm):00001                 org $7000
                      (      print-3.asm):00002                 include "decbdefs.asm"
     006A             (     decbdefs.asm):00001         DEVCFW: equ $006a               ; tab zone field width
     006B             (     decbdefs.asm):00002         DEVLCF: equ $006b               ; last tab position
     006C             (     decbdefs.asm):00003         DEVPOS: equ $006c               ; print position (column)
     006D             (     decbdefs.asm):00004         DEVWID: equ $006d               ; print width
     006E             (     decbdefs.asm):00005         PRTDEV: equ $006e               ; print device (-1 cassette/0 not cassette)
     006F             (     decbdefs.asm):00006         DEVNUM: equ $006f               ; device number
     0088             (     decbdefs.asm):00007         CURPOS: equ $0088               ; current position for device 0
                      (     decbdefs.asm):00008                 
     015E             (     decbdefs.asm):00009         RVEC0:  equ $015e               ; open
     0161             (     decbdefs.asm):00010         RVEC1:  equ $0161               ; device number validity check
     0164             (     decbdefs.asm):00011         RVEC2:  equ $0164               ; set print parameters
     0167             (     decbdefs.asm):00012         RVEC3:  equ $0167               ; console out
     016A             (     decbdefs.asm):00013         RVEC4:  equ $016a               ; console in
     016D             (     decbdefs.asm):00014         RVEC5:  equ $016d               ; input device number check
     0170             (     decbdefs.asm):00015         RVEC6:  equ $0170               ; output device number check
     0173             (     decbdefs.asm):00016         RVEC7:  equ $0173               ; close all files
     0176             (     decbdefs.asm):00017         RVEC8:  equ $0176               ; close one file
     0179             (     decbdefs.asm):00018         RVEC9:  equ $0179               ; print
     017C             (     decbdefs.asm):00019         RVEC10: equ $017c               ; input
     017F             (     decbdefs.asm):00020         RVEC11: equ $017f               ; break check
     0182             (     decbdefs.asm):00021         RVEC12: equ $0182               ; input basic line
     0185             (     decbdefs.asm):00022         RVEC13: equ $0185               ; terminate basic line
     0188             (     decbdefs.asm):00023         RVEC14: equ $0188               ; eof command
     018B             (     decbdefs.asm):00024         RVEC15: equ $018b               ; evaluate expression
     018E             (     decbdefs.asm):00025         RVEC16: equ $018e               ; on error goto
     0191             (     decbdefs.asm):00026         RVEC17: equ $0191               ; error driver
     0194             (     decbdefs.asm):00027         RVEC18: equ $0194               ; run
     0197             (     decbdefs.asm):00028         RVEC19: equ $0197               ; ascii to fp
     019A             (     decbdefs.asm):00029         RVEC20: equ $019a               ; basic command interpreter
     019D             (     decbdefs.asm):00030         RVEC21: equ $019d               ; reset/set/point
     01A0             (     decbdefs.asm):00031         RVEC22: equ $01a0               ; cls/secondary token/renum token chk/get/put
     01A3             (     decbdefs.asm):00032         RVEC23: equ $01a3               ; tokenize line
     01A6             (     decbdefs.asm):00033         RVEC24: equ $01a6               ; detokenize line
                      (     decbdefs.asm):00034                 
     0400             (     decbdefs.asm):00035         VIDRAM: equ $0400               ; start of screen memory
                      (     decbdefs.asm):00036         
     FFDE             (     decbdefs.asm):00037         RAMROM: equ $ffde               ; switch to RAM/ROM mode
     FFDF             (     decbdefs.asm):00038         RAMRAM: equ $ffdf               ; switch to all RAM mode
7000                  (      print-3.asm):00003         start:
7000 8D05             (      print-3.asm):00004                 bsr allram
7002 8D36             (      print-3.asm):00005                 bsr print0
7004 8D53             (      print-3.asm):00006                 bsr patch_vec
7006 39               (      print-3.asm):00007                 rts
                      (      print-3.asm):00008                 include "allram.asm"
7007                  (       allram.asm):00001         allram: 
                      (       allram.asm):00002                 ;;  check if already in all RAM mode
7007 B68000           (       allram.asm):00003                 lda $8000
700A 1F89             (       allram.asm):00004                 tfr a,b
700C 738000           (       allram.asm):00005                 com $8000
700F B88000           (       allram.asm):00006                 eora $8000
7012 2704             (       allram.asm):00007                 beq rom
7014 F78000           (       allram.asm):00008                 stb $8000
7017 39               (       allram.asm):00009                 rts
                      (       allram.asm):00010         
                      (       allram.asm):00011                 ;; copy ROMs to RAM
7018                  (       allram.asm):00012         rom:    
7018 3401             (       allram.asm):00013                 pshs cc
701A 1A50             (       allram.asm):00014                 orcc #$50               ; disable interrupts
701C 10DFFE           (       allram.asm):00015                 sts $fe
701F 10CE8000         (       allram.asm):00016                 lds #$8000
7023                  (       allram.asm):00017         loop@:
7023 7FFFDE           (       allram.asm):00018                 clr RAMROM
7026 3576             (       allram.asm):00019                 puls a,b,x,y,u
7028 7FFFDF           (       allram.asm):00020                 clr RAMRAM
702B 3476             (       allram.asm):00021                 pshs u,y,x,a,b
702D 3268             (       allram.asm):00022                 leas 8,s
702F 118CFF00         (       allram.asm):00023                 cmps #$ff00
7033 2FEE             (       allram.asm):00024                 ble loop@
7035 10DEFE           (       allram.asm):00025                 lds $fe
7038 3581             (       allram.asm):00026                 puls cc,pc
                      (       allram.asm):00027                 
                      (      print-3.asm):00009                 include "print0.asm"
703A                  (       print0.asm):00001         print0:
                      (       print0.asm):00002                 ;; modify PRINT@ limit
703A 8E00FF           (       print0.asm):00003                 ldx #255
703D BFA558           (       print0.asm):00004                 stx $a558 ; limit
7040 30890400         (       print0.asm):00005                 leax VIDRAM,x ; adjust back to memory location
7044 BFA55F           (       print0.asm):00006                 stx $a55f ; adjusts
                      (       print0.asm):00007                 ;; modify CLS end
7047 BFA932           (       print0.asm):00008                 stx $a932 ; cls end
                      (       print0.asm):00009                 ;; modify CHROUT limit
704A BFA347           (       print0.asm):00010                 stx $a347 ; memory location limit
704D 3088E1           (       print0.asm):00011                 leax -31,x ; beginning of last line
7050 BFA354           (       print0.asm):00012                 stx $a354 ; scroll limit
                      (       print0.asm):00013                 ;; set cursor at top of screen
7053 8E0400           (       print0.asm):00014                 ldx #VIDRAM
7056 9F88             (       print0.asm):00015                 stx CURPOS
7058 39               (       print0.asm):00016                 rts
                      (      print-3.asm):00010                 include "patch_vec.asm"
                      (    patch_vec.asm):00001         
                      (    patch_vec.asm):00002                 ;; patch vectors
7059                  (    patch_vec.asm):00003         patch_vec:
                      (    patch_vec.asm):00004                 ;; save in new code
7059 CE7076           (    patch_vec.asm):00005                 ldu #vectors
705C                  (    patch_vec.asm):00006         loop@:  
705C AEC1             (    patch_vec.asm):00007                 ldx ,u++
705E 2715             (    patch_vec.asm):00008                 beq exit@
7060 10AEC1           (    patch_vec.asm):00009                 ldy ,u++
7063 A684             (    patch_vec.asm):00010                 lda ,x
7065 A7A0             (    patch_vec.asm):00011                 sta ,y+
7067 867E             (    patch_vec.asm):00012                 lda #$7e
7069 A780             (    patch_vec.asm):00013                 sta ,x+
706B EC84             (    patch_vec.asm):00014                 ldd ,x
706D EDA4             (    patch_vec.asm):00015                 std ,y
706F ECC1             (    patch_vec.asm):00016                 ldd ,u++
7071 ED84             (    patch_vec.asm):00017                 std ,x
7073 20E7             (    patch_vec.asm):00018                 bra loop@
7075                  (    patch_vec.asm):00019         exit@:  
7075 39               (    patch_vec.asm):00020                 rts
7076                  (    patch_vec.asm):00021         vectors:
7076 01617E9A7E90     (    patch_vec.asm):00022                 fdb RVEC1,ovec1,rvec1_3
707C 01647EA77E9D     (    patch_vec.asm):00023                 fdb RVEC2,ovec2,rvec2_3
7082 01677ECD7EC3     (    patch_vec.asm):00024                 fdb RVEC3,ovec3,rvec3_3
7088 0000             (    patch_vec.asm):00025                 fdb $0000
                      (      print-3.asm):00011                 ifdef ADV
                      (      print-3.asm):00012                 org $7e90
                      (      print-3.asm):00013                 else
                      (      print-3.asm):00014                 org $7f50
                      (      print-3.asm):00015                 endc
                      (      print-3.asm):00016                 include "vector1.asm"
                      (      vector1.asm):00001                 
                      (      vector1.asm):00002                 ;; Validate device number
7E90                  (      vector1.asm):00003         rvec1_3:
7E90 3262             (      vector1.asm):00004                 leas 2,s
7E92 39               (      vector1.asm):00005                 rts
7E93 C1FD             (      vector1.asm):00006                 cmpb #-3
7E95 2603             (      vector1.asm):00007                 bne ovec1
7E97 3262             (      vector1.asm):00008                 leas 2,s
7E99 39               (      vector1.asm):00009                 rts
7E9A                  (      vector1.asm):00010         ovec1:  rmb 3
                      (      vector1.asm):00011         
                      (      print-3.asm):00017                 include "vector2.asm"
                      (      vector2.asm):00001                 
                      (      vector2.asm):00002                 ;; set print parameters
7E9D                  (      vector2.asm):00003         rvec2_3:
7E9D 3402             (      vector2.asm):00004                 pshs a                  ;
7E9F 966F             (      vector2.asm):00005                 lda DEVNUM
7EA1 81FD             (      vector2.asm):00006                 cmpa #-3
7EA3 3502             (      vector2.asm):00007                 puls a
7EA5 2703             (      vector2.asm):00008                 beq cont@
7EA7                  (      vector2.asm):00009         ovec2:  rmb 3
7EAA                  (      vector2.asm):00010         cont@:  
7EAA 3262             (      vector2.asm):00011                 leas 2,s
7EAC 3416             (      vector2.asm):00012                 pshs x,b,a
7EAE 0F6E             (      vector2.asm):00013                 clr PRTDEV
                      (      vector2.asm):00014                 ;; a=current column
7EB0 B67EC1           (      vector2.asm):00015                 lda curpos3+1
7EB3 841F             (      vector2.asm):00016                 anda #cols-1
                      (      vector2.asm):00017                 ;; b=number of columns
7EB5 C620             (      vector2.asm):00018                 ldb #cols
7EB7 DD6C             (      vector2.asm):00019                 std DEVPOS
                      (      vector2.asm):00020                 ;; xhi=tab size, xlo=last tab column
7EB9 8E0818           (      vector2.asm):00021                 ldx #$0818
7EBC 9F6A             (      vector2.asm):00022                 stx DEVCFW
7EBE 3596             (      vector2.asm):00023                 puls a,b,x,pc
                      (      print-3.asm):00018                 ifdef ADV
                      (      print-3.asm):00019                 include "vector3a.asm"
                      (     vector3a.asm):00001                 
                      (     vector3a.asm):00002                 ;; output to device
     0008             (     vector3a.asm):00003         rows:   equ 8
     0020             (     vector3a.asm):00004         cols:   equ 32
     0500             (     vector3a.asm):00005         scrstt: equ $0500
     0020             (     vector3a.asm):00006         space:  equ $20
                      (     vector3a.asm):00007         
7EC0                  (     vector3a.asm):00008         curpos3:
7EC0 0500             (     vector3a.asm):00009                 fdb scrstt
7EC2                  (     vector3a.asm):00010         xloc:   rmb 1
7EC3                  (     vector3a.asm):00011         rvec3_3:
7EC3 3402             (     vector3a.asm):00012                 pshs a
7EC5 966F             (     vector3a.asm):00013                 lda DEVNUM
7EC7 81FD             (     vector3a.asm):00014                 cmpa #-3
7EC9 3502             (     vector3a.asm):00015                 puls a
7ECB 2703             (     vector3a.asm):00016                 beq cont@
7ECD                  (     vector3a.asm):00017         ovec3:  rmb 3
7ED0                  (     vector3a.asm):00018         cont@:
7ED0 3262             (     vector3a.asm):00019                 leas 2,s
7ED2 3416             (     vector3a.asm):00020                 pshs x,b,a
7ED4                  (     vector3a.asm):00021         branch: 
7ED4 8120             (     vector3a.asm):00022                 cmpa #$20
7ED6 102500F6         (     vector3a.asm):00023                 lblo cntl
7EDA BE7EC0           (     vector3a.asm):00024                 ldx curpos3
7EDD                  (     vector3a.asm):00025         fixchr: 
7EDD 8140             (     vector3a.asm):00026                 cmpa #$40
7EDF 250A             (     vector3a.asm):00027                 blo wrtchr
7EE1 8180             (     vector3a.asm):00028                 cmpa #$80
7EE3 2406             (     vector3a.asm):00029                 bhs wrtchr
7EE5 8160             (     vector3a.asm):00030                 cmpa #$60
7EE7 240E             (     vector3a.asm):00031                 bhs lcase
7EE9                  (     vector3a.asm):00032         ucase:  
7EE9 843F             (     vector3a.asm):00033                 anda #$3f
7EEB                  (     vector3a.asm):00034         wrtchr:
7EEB A780             (     vector3a.asm):00035                 sta ,x+
7EED                  (     vector3a.asm):00036         may_scroll:     
7EED 8C0600           (     vector3a.asm):00037                 cmpx #scrstt+rows*cols
7EF0 2709             (     vector3a.asm):00038                 beq scroll
7EF2                  (     vector3a.asm):00039         save:
7EF2 BF7EC0           (     vector3a.asm):00040                 stx curpos3
7EF5                  (     vector3a.asm):00041         exit:
7EF5 3596             (     vector3a.asm):00042                 puls a,b,x,pc
7EF7                  (     vector3a.asm):00043         lcase:
7EF7 8020             (     vector3a.asm):00044                 suba #$20
7EF9 20F0             (     vector3a.asm):00045                 bra wrtchr
                      (     vector3a.asm):00046                 
7EFB                  (     vector3a.asm):00047         scroll:
7EFB 8E0500           (     vector3a.asm):00048                 ldx #scrstt
7EFE                  (     vector3a.asm):00049         lp1@:   
7EFE A68820           (     vector3a.asm):00050                 lda cols,x
7F01 A780             (     vector3a.asm):00051                 sta ,x+
7F03 8C05E0           (     vector3a.asm):00052                 cmpx #scrstt+(rows-1)*cols
7F06 26F6             (     vector3a.asm):00053                 bne lp1@
7F08 8620             (     vector3a.asm):00054                 lda #space
7F0A 5F               (     vector3a.asm):00055                 clrb
7F0B                  (     vector3a.asm):00056         lp2@:
7F0B A785             (     vector3a.asm):00057                 sta b,x
7F0D 5C               (     vector3a.asm):00058                 incb
7F0E C120             (     vector3a.asm):00059                 cmpb #cols
7F10 26F9             (     vector3a.asm):00060                 bne lp2@
7F12 20DE             (     vector3a.asm):00061                 bra save
                      (     vector3a.asm):00062         
7F14                  (     vector3a.asm):00063         cr:
7F14 BE7EC0           (     vector3a.asm):00064                 ldx curpos3
7F17 1F10             (     vector3a.asm):00065                 tfr x,d
7F19 C41F             (     vector3a.asm):00066                 andb #cols-1
7F1B 50               (     vector3a.asm):00067                 negb
7F1C CB20             (     vector3a.asm):00068                 addb #cols
7F1E 8620             (     vector3a.asm):00069                 lda #space
7F20                  (     vector3a.asm):00070         loop@:
7F20 A780             (     vector3a.asm):00071                 sta ,x+
7F22 5A               (     vector3a.asm):00072                 decb
7F23 26FB             (     vector3a.asm):00073                 bne loop@
7F25 20C6             (     vector3a.asm):00074                 bra may_scroll
                      (     vector3a.asm):00075         
7F27                  (     vector3a.asm):00076         home:
7F27 8E0500           (     vector3a.asm):00077                 ldx #scrstt
7F2A 20C6             (     vector3a.asm):00078                 bra save
                      (     vector3a.asm):00079         
                      (     vector3a.asm):00080                 ;; uses evil self modifying code :-)
7F2C                  (     vector3a.asm):00081         posn:
7F2C 8616             (     vector3a.asm):00082                 lda #$16
7F2E B77ED4           (     vector3a.asm):00083                 sta branch
7F31 CC0062           (     vector3a.asm):00084                 ldd #setx-branch-3
7F34 FD7ED5           (     vector3a.asm):00085                 std branch+1
7F37 3596             (     vector3a.asm):00086                 puls a,b,x,pc
7F39                  (     vector3a.asm):00087         setx:
7F39 8020             (     vector3a.asm):00088                 suba #$20
7F3B B77EC2           (     vector3a.asm):00089                 sta xloc
7F3E CC006C           (     vector3a.asm):00090                 ldd #sety-branch-3
7F41 3596             (     vector3a.asm):00091                 puls a,b,x,pc
7F43                  (     vector3a.asm):00092         sety:
7F43 8020             (     vector3a.asm):00093                 suba #$20
7F45 C620             (     vector3a.asm):00094                 ldb #cols
7F47 3D               (     vector3a.asm):00095                 mul
7F48 2B0C             (     vector3a.asm):00096                 bmi skip@
7F4A 10830100         (     vector3a.asm):00097                 cmpd #rows*cols
7F4E 2406             (     vector3a.asm):00098                 bhs skip@
7F50 C30500           (     vector3a.asm):00099                 addd #scrstt
7F53 FD7EC0           (     vector3a.asm):00100                 std curpos3
7F56                  (     vector3a.asm):00101         skip@:
7F56 CC8120           (     vector3a.asm):00102                 ldd #$8120              ; cmpa #$20
7F59 FD7ED4           (     vector3a.asm):00103                 std branch
7F5C 8610             (     vector3a.asm):00104                 lda #$10                ; prebyte for lblo
7F5E FD7ED6           (     vector3a.asm):00105                 std branch+2
7F61 3596             (     vector3a.asm):00106                 puls a,b,x,pc
                      (     vector3a.asm):00107         
7F63                  (     vector3a.asm):00108         erlin:
7F63 F67EC1           (     vector3a.asm):00109                 ldb curpos3+1
7F66 C4E0             (     vector3a.asm):00110                 andb #$100-cols         ; cols is power of 2
7F68 F77EC1           (     vector3a.asm):00111                 stb curpos3+1
                      (     vector3a.asm):00112         
7F6B                  (     vector3a.asm):00113         erendl:
7F6B FC7EC0           (     vector3a.asm):00114                 ldd curpos3
7F6E 1F01             (     vector3a.asm):00115                 tfr d,x
7F70 8620             (     vector3a.asm):00116                 lda #space
7F72 C41F             (     vector3a.asm):00117                 andb #cols-1            ; cols is power of 2
7F74 50               (     vector3a.asm):00118                 negb
7F75 CB20             (     vector3a.asm):00119                 addb #cols
7F77 301F             (     vector3a.asm):00120                 leax -1,x
7F79                  (     vector3a.asm):00121         loop@:
7F79 A785             (     vector3a.asm):00122                 sta b,x
7F7B 5A               (     vector3a.asm):00123                 decb
7F7C 26FB             (     vector3a.asm):00124                 bne loop@
7F7E 3596             (     vector3a.asm):00125                 puls a,b,x,pc
                      (     vector3a.asm):00126                 
7F80                  (     vector3a.asm):00127         currt:  
7F80 8C05FF           (     vector3a.asm):00128                 cmpx #scrstt+rows*cols-1
7F83 1027FF6E         (     vector3a.asm):00129                 lbeq exit
7F87 3001             (     vector3a.asm):00130                 leax 1,x
7F89 16FF66           (     vector3a.asm):00131                 lbra save
                      (     vector3a.asm):00132         
7F8C                  (     vector3a.asm):00133         curlt:  
7F8C 8C0500           (     vector3a.asm):00134                 cmpx #scrstt
7F8F 1027FF62         (     vector3a.asm):00135                 lbeq exit
7F93 301F             (     vector3a.asm):00136                 leax -1,x
7F95 16FF5A           (     vector3a.asm):00137                 lbra save
                      (     vector3a.asm):00138         
7F98 8C0520           (     vector3a.asm):00139         curup:  cmpx #scrstt+cols
7F9B 102DFF56         (     vector3a.asm):00140                 lblt exit
7F9F 3088E0           (     vector3a.asm):00141                 leax -cols,x
7FA2 16FF4D           (     vector3a.asm):00142                 lbra save
                      (     vector3a.asm):00143         
7FA5 8C05F8           (     vector3a.asm):00144         curdn:  cmpx #scrstt+rows*(cols-1)
7FA8 1024FF49         (     vector3a.asm):00145                 lbhs exit
7FAC 308820           (     vector3a.asm):00146                 leax cols,x
7FAF 16FF40           (     vector3a.asm):00147                 lbra save
                      (     vector3a.asm):00148         
7FB2                  (     vector3a.asm):00149         erends:
7FB2 8620             (     vector3a.asm):00150                 lda #space
7FB4 BE7EC0           (     vector3a.asm):00151                 ldx curpos3
7FB7                  (     vector3a.asm):00152         loop@:
7FB7 A780             (     vector3a.asm):00153                 sta ,x+
7FB9 8C0600           (     vector3a.asm):00154                 cmpx #scrstt+rows*cols
7FBC 26F9             (     vector3a.asm):00155                 bne loop@
7FBE 3596             (     vector3a.asm):00156                 puls a,b,x,pc
                      (     vector3a.asm):00157         
7FC0                  (     vector3a.asm):00158         cls:
7FC0 8E0500           (     vector3a.asm):00159                 ldx #scrstt
7FC3 BF7EC0           (     vector3a.asm):00160                 stx curpos3
7FC6 CC2020           (     vector3a.asm):00161                 ldd #space*$0101
7FC9                  (     vector3a.asm):00162         loop@:
7FC9 ED81             (     vector3a.asm):00163                 std ,x++
7FCB 8C0600           (     vector3a.asm):00164                 cmpx #scrstt+rows*cols
7FCE                  (     vector3a.asm):00165         nul:    
7FCE 3596             (     vector3a.asm):00166                 puls a,b,x,pc
                      (     vector3a.asm):00167                 
7FD0                  (     vector3a.asm):00168         cntl:
7FD0 810D             (     vector3a.asm):00169                 cmpa #$0d
7FD2 1027FF3E         (     vector3a.asm):00170                 lbeq cr
7FD6 22F6             (     vector3a.asm):00171                 bhi nul
7FD8 48               (     vector3a.asm):00172                 asla
7FD9 308D0002         (     vector3a.asm):00173                 leax ctltab,pcr
7FDD 6E96             (     vector3a.asm):00174                 jmp [a,x]
7FDF                  (     vector3a.asm):00175         ctltab:
7FDF 7FCE7F277F2C7F63 (     vector3a.asm):00176                 fdb nul,home,posn,erlin,erendl,nul,currt,nul
     7F6B7FCE7F807FCE
7FEF 7F8C7F987FA57FB2 (     vector3a.asm):00177                 fdb curlt,curup,curdn,erends,cls
     7FC0
                      (      print-3.asm):00020                 else
                      (      print-3.asm):00021                 include "vector3.asm"
                      (      print-3.asm):00022                 endc
                      (      print-3.asm):00023                 end start
